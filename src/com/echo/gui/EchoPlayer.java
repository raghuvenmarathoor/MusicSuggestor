/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on Apr 24, 2013, 1:12:43 PM
 */
package com.echo.gui;

/**
 *
 * @author Staff
 */
import com.echo.bean.TrackMetaInfoBean;
import com.echo.render.PlayerListTableCellRender;
import com.echo.settings.AppSettings;
import com.echo.settings.SettingsGUI;
import com.echo.sound.PlaySound;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.Clip;
import javax.swing.JFileChooser;
import com.echo.threads.DurationThread;
import com.echo.threads.JsliderThread;
import com.echo.threads.MyPlayerThread;
import com.echo.util.AppVariables;
import java.awt.Color;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javazoom.jlgui.basicplayer.BasicPlayer;

public class EchoPlayer extends javax.swing.JFrame {
    
    AudioInputStream ais = null;
    File file = null;
    File[] playFiles = null;
    String filePath = "";
    PlaySound playSound;
    File playFile = null;
    Clip clip;
    int i = 0;
    Object playingFile = null;
    double volumeSliderValue = 0.0;
    double volumeSliderCurrentValue = 0.0;
    TrackMetaInfoBean trackInfoBean = null;
    int currentRowIndex = 0;
    MyPlayerThread playerThread;
    int timeInSeconds = 0;
    String playStatus = "Play";
    long currentFilesize = 0;
    int rowCount = 0;
    boolean stat = false;

    /** Creates new form NewJFrame */
    public EchoPlayer() {
        
        initComponents();
        if(AppVariables.AllowIdentification){
         FingerPrintCheckBox.setSelected(true);   
        }
        //JOptionPane.showMessageDialog(null, AppVariables.Code_Generator_Exe);
        setIconImage(new ImageIcon(getClass().getResource("/com/echo/image/echoplayer.png")).getImage());
        PlayListjTable.getColumn("Title").setCellRenderer(new PlayerListTableCellRender());
        VolumeJSlider = new JSlider();
        playSound = new PlaySound();
        // volumeSliderCurrentValue = VolumeJSlider.getValue();
        SeekjSlider.setMinimum(0);
        SeekjSlider.setValue(0);
        PlayListjTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        rowCount = PlayListjTable.getRowCount();
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        MusicNameLabel = new javax.swing.JLabel();
        AlbumLabel = new javax.swing.JLabel();
        TitleLabel = new javax.swing.JLabel();
        NameLabel = new javax.swing.JLabel();
        MusicAlbumLabel = new javax.swing.JLabel();
        MusicTitleLabel = new javax.swing.JLabel();
        FingerPrintCheckBox = new javax.swing.JCheckBox();
        PlayingPanel = new javax.swing.JPanel();
        SeekjSlider = new javax.swing.JSlider();
        RunningTimejLabel = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        TotalTimejLabel = new javax.swing.JLabel();
        VolumeJSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        VolumeDynamicLabel = new javax.swing.JLabel();
        jPreviousButton = new javax.swing.JButton();
        NextJButton = new javax.swing.JButton();
        PlayjButton = new javax.swing.JButton();
        StopjButton = new javax.swing.JButton();
        PlaylistScrollPane = new javax.swing.JScrollPane();
        PlayListjTable = new javax.swing.JTable();
        PlayerMenu = new javax.swing.JMenuBar();
        OpenAddToList = new javax.swing.JMenu();
        OpenMenuItem = new javax.swing.JMenuItem();
        OpenAddListMenuItem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        PlayMenuItem = new javax.swing.JMenuItem();
        PauseMenuItem = new javax.swing.JMenuItem();
        OptionMenu = new javax.swing.JMenu();
        SuggestionMenuItem = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EchoPlayer");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setToolTipText("SongInfo");
        jPanel1.setName("SongInfo"); // NOI18N

        AlbumLabel.setText("Album:");

        TitleLabel.setText("Title    :");

        NameLabel.setText("Name :");

        FingerPrintCheckBox.setText("FingerPrint");
        FingerPrintCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FingerPrintCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(NameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(TitleLabel)
                                .addComponent(AlbumLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(MusicAlbumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(MusicTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(FingerPrintCheckBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(MusicNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(MusicNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TitleLabel)
                    .addComponent(MusicTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MusicAlbumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AlbumLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FingerPrintCheckBox))
        );

        PlayingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        PlayingPanel.setMaximumSize(new java.awt.Dimension(10, 10));

        SeekjSlider.setValue(0);
        SeekjSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SeekjSliderMouseClicked(evt);
            }
        });
        SeekjSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SeekjSliderStateChanged(evt);
            }
        });

        RunningTimejLabel.setText("0.00");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        TotalTimejLabel.setText("0.00");

        VolumeJSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        VolumeJSlider.setValue(0);
        VolumeJSlider.setPreferredSize(new java.awt.Dimension(100, 25));
        VolumeJSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                VolumeJSliderStateChanged(evt);
            }
        });
        VolumeJSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                VolumeJSliderMouseDragged(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/echo/image/gnome_audio_volume_high.png"))); // NOI18N

        VolumeDynamicLabel.setText("0");

        jPreviousButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/echo/image/backward.png"))); // NOI18N
        jPreviousButton.setToolTipText("Previous");
        jPreviousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPreviousButtonActionPerformed(evt);
            }
        });

        NextJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/echo/image/forward.png"))); // NOI18N
        NextJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextJButtonActionPerformed(evt);
            }
        });

        PlayjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/echo/image/play.png"))); // NOI18N
        PlayjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayjButtonActionPerformed(evt);
            }
        });

        StopjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/echo/image/stop1disabled.png"))); // NOI18N
        StopjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PlayingPanelLayout = new javax.swing.GroupLayout(PlayingPanel);
        PlayingPanel.setLayout(PlayingPanelLayout);
        PlayingPanelLayout.setHorizontalGroup(
            PlayingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PlayingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PlayingPanelLayout.createSequentialGroup()
                        .addComponent(jPreviousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PlayjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StopjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NextJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VolumeJSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VolumeDynamicLabel)
                        .addGap(140, 140, 140)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PlayingPanelLayout.createSequentialGroup()
                        .addComponent(RunningTimejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SeekjSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TotalTimejLabel))))
        );
        PlayingPanelLayout.setVerticalGroup(
            PlayingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayingPanelLayout.createSequentialGroup()
                .addGroup(PlayingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SeekjSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RunningTimejLabel)
                    .addComponent(TotalTimejLabel))
                .addGroup(PlayingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PlayingPanelLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PlayingPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PlayingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(VolumeJSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PlayingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(PlayingPanelLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NextJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(PlayjButton)
                                .addComponent(StopjButton)
                                .addGroup(PlayingPanelLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPreviousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(VolumeDynamicLabel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PlaylistScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PlaylistScrollPaneMouseClicked(evt);
            }
        });

        PlayListjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PlayListjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PlayListjTableMouseClicked(evt);
            }
        });
        PlaylistScrollPane.setViewportView(PlayListjTable);
        PlayListjTable.getColumnModel().getColumn(1).setMinWidth(60);
        PlayListjTable.getColumnModel().getColumn(1).setMaxWidth(60);

        OpenAddToList.setText("File");
        OpenAddToList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenAddToListActionPerformed(evt);
            }
        });

        OpenMenuItem.setText("Open");
        OpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuItemActionPerformed(evt);
            }
        });
        OpenAddToList.add(OpenMenuItem);

        OpenAddListMenuItem.setText("AddToList");
        OpenAddListMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenAddListMenuItemActionPerformed(evt);
            }
        });
        OpenAddToList.add(OpenAddListMenuItem);

        jMenuItem2.setText("Create Play List");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        OpenAddToList.add(jMenuItem2);

        jMenuItem3.setText("Open PlayList");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        OpenAddToList.add(jMenuItem3);
        OpenAddToList.add(jSeparator1);

        jMenuItem1.setText("Exit");
        OpenAddToList.add(jMenuItem1);

        PlayerMenu.add(OpenAddToList);

        jMenu2.setText("Play");

        PlayMenuItem.setText("Play");
        PlayMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(PlayMenuItem);

        PauseMenuItem.setText("Pause");
        PauseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(PauseMenuItem);

        PlayerMenu.add(jMenu2);

        OptionMenu.setText("Options");

        SuggestionMenuItem.setText("Suggestions");
        SuggestionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuggestionMenuItemActionPerformed(evt);
            }
        });
        OptionMenu.add(SuggestionMenuItem);

        jMenuItem4.setText("Settings");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        OptionMenu.add(jMenuItem4);

        PlayerMenu.add(OptionMenu);

        setJMenuBar(PlayerMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PlayingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PlaylistScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PlaylistScrollPane, 0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PlayingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void FingerPrintCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FingerPrintCheckBoxActionPerformed
// TODO add your handling code here:

    JCheckBox myJCheckBox = (JCheckBox) evt.getSource();
    if (myJCheckBox.isSelected()) {
        CodeStringGenerator codeStringGenerator = new CodeStringGenerator();
        codeStringGenerator.setLocationRelativeTo(null);
        codeStringGenerator.setVisible(true);
        
    } else {
        JOptionPane.showMessageDialog(this, "Please check the check box");
    }
    
}//GEN-LAST:event_FingerPrintCheckBoxActionPerformed
    
private void SeekjSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SeekjSliderStateChanged
// TODO add your handling code here:
//playSound.status = BasicPlayer.SEEKING;
//    if (SeekjSlider.getValue() > 0) {
//        long value = (SeekjSlider.getMaximum()) / SeekjSlider.getValue();
//        SeekjSlider.setValue((int) value);
//        playSound.seekMedia(value);
//    }
}//GEN-LAST:event_SeekjSliderStateChanged
            
private void StopjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopjButtonActionPerformed
// TODO add your handling code here:
    System.out.println("stop");
    
    playSound.stopSong();
    
}//GEN-LAST:event_StopjButtonActionPerformed
    
private void PlayjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayjButtonActionPerformed


    
    
    if (playStatus.equalsIgnoreCase("play")) {
        stat = true;
        if (PlayListjTable != null && PlayListjTable.getRowCount() != -1 && PlayListjTable.isRowSelected(PlayListjTable.getSelectedRow())) {
            playFile = (File) PlayListjTable.getValueAt(PlayListjTable.getSelectedRow(), 0);
            playSong(playFile);
            JOptionPane.showConfirmDialog(null, playingFile);
            
        } else {
            JOptionPane.showMessageDialog(this, "Please select a song from playlist");
        }
    } else if (playStatus.equalsIgnoreCase("pause")) {
        System.out.println("pause...");
        stat = false;
        
        
        playSound.pauseSong();
        //PlayjButton.setActionCommand("Resume");
        playStatus = "resume";
        
    } else {
        
        playSound.resumeSong();
        playSound.status = 0;
        
        stat = true;
        new Thread(playerThread).start();
        playStatus = "pause";
    }
    
    
}//GEN-LAST:event_PlayjButtonActionPerformed
    
private void VolumeJSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_VolumeJSliderStateChanged
// TODO add your handling code here:

    
    if (playSound.status == BasicPlayer.PLAYING) {
        JSlider js = (JSlider) evt.getSource();
        VolumeDynamicLabel.setText("" + js.getValue());
        double volume = (double) js.getValue() / 100;
        System.err.println("volumeSliderValue:" + volumeSliderValue);
        playSound.setVolume(volume);
        
        System.out.println("volume slider value:" + volumeSliderValue);
    }
    
}//GEN-LAST:event_VolumeJSliderStateChanged
    
private void VolumeJSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VolumeJSliderMouseDragged
// TODO add your handling code here:
}//GEN-LAST:event_VolumeJSliderMouseDragged
    
private void PlayListjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PlayListjTableMouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_PlayListjTableMouseClicked
    
private void OpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuItemActionPerformed
// TODO add your handling code here:
    String cmd = evt.getActionCommand();
    if (FingerPrintCheckBox.isSelected()) {
        i = 0;
        JFileChooser fileChooser = new JFileChooser("E:\\");
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.showOpenDialog(this);
        playFiles = fileChooser.getSelectedFiles();
        AppVariables.PLAY_LIST = playFiles;
        DurationThread durationThread = new DurationThread(playFiles);
        ArrayList<String> durationList = durationThread.getTrackDuration();
        addToTable(playFiles, durationList, cmd);
    } else {
        JOptionPane.showMessageDialog(this, "Please check fingerprint checkbox inoder to get Suggestion");
        JFileChooser fileChooser = new JFileChooser("E:\\");
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.showOpenDialog(this);
        playFiles = fileChooser.getSelectedFiles();
        AppVariables.PLAY_LIST = playFiles;
        DurationThread durationThread = new DurationThread(playFiles);
        ArrayList<String> durationList = durationThread.getTrackDuration();
        addToTable(playFiles, durationList, cmd);
    }
    
}//GEN-LAST:event_OpenMenuItemActionPerformed
    
private void OpenAddListMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenAddListMenuItemActionPerformed
// TODO add your handling code here:

    
    String addCmd = evt.getActionCommand();
    JFileChooser fileChooser = new JFileChooser("E:\\");
    fileChooser.setMultiSelectionEnabled(true);
    fileChooser.showOpenDialog(this);
    playFiles = fileChooser.getSelectedFiles();
    DurationThread durationThread = new DurationThread(playFiles);
    ArrayList<String> durationList = durationThread.getTrackDuration();
    addToTable(playFiles, durationList, "AddToList");
    
    
    
}//GEN-LAST:event_OpenAddListMenuItemActionPerformed
    
private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
// TODO add your handling code here:
    File file = new File(("user.dir") + File.separator + "PlayList");
    if (file.exists()) {
        ObjectOutputStream oos = null;
        try {
            oos = new ObjectOutputStream(new FileOutputStream(new File("Playlist.plst")));
            oos.writeObject(AppVariables.PLAY_LIST);
        } catch (IOException ex) {
            Logger.getLogger(EchoPlayer.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                oos.close();
            } catch (IOException ex) {
                Logger.getLogger(EchoPlayer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    } else if (!file.exists()) {
        try {
            file.mkdir();
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File("Playlist.plst")));
            oos.writeObject(AppVariables.PLAY_LIST);
        } catch (IOException ex) {
            Logger.getLogger(EchoPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
}//GEN-LAST:event_jMenuItem2ActionPerformed
    
private void OpenAddToListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenAddToListActionPerformed
// TODO add your handling code here:

    String addCmd = evt.getActionCommand();
    JFileChooser fileChooser = new JFileChooser("E:\\");
    fileChooser.setMultiSelectionEnabled(true);
    fileChooser.showOpenDialog(this);
    playFiles = fileChooser.getSelectedFiles();
    DurationThread durationThread = new DurationThread(playFiles);
    ArrayList<String> durationList = durationThread.getTrackDuration();
    addToTable(playFiles, durationList, "AddToList");
    
}//GEN-LAST:event_OpenAddToListActionPerformed
    
private void PlayMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayMenuItemActionPerformed
// TODO add your handling code here:

    if (PlayListjTable != null && PlayListjTable.getRowCount() != -1 && PlayListjTable.isRowSelected(PlayListjTable.getSelectedRow())) {
        playFile = (File) PlayListjTable.getValueAt(PlayListjTable.getSelectedRow(), 0);
        playSong(playFile);
    } else {
        JOptionPane.showMessageDialog(this, "Please select a song from playlist");
    }
    
    
    
    
}//GEN-LAST:event_PlayMenuItemActionPerformed
    
private void SuggestionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuggestionMenuItemActionPerformed
// TODO add your handling code here:
    SuggestionJFrame frame = new SuggestionJFrame();
    frame.setLocationRelativeTo(this);
    frame.setVisible(true);
}//GEN-LAST:event_SuggestionMenuItemActionPerformed
    
private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
    try {
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser("E:\\");
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.showOpenDialog(this);
        File playList = fileChooser.getSelectedFile();
        if (playList.exists()) {
            ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(playList));
            Object readObject = inputStream.readObject();
            if (readObject instanceof File[]) {
                playFiles = (File[]) readObject;
                DurationThread durationThread = new DurationThread(playFiles);
                ArrayList<String> durationList = durationThread.getTrackDuration();
                addToTable(playFiles, durationList, "Open");
                
                
            }
        }
    } catch (IOException ex) {
        Logger.getLogger(EchoPlayer.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(EchoPlayer.class.getName()).log(Level.SEVERE, null, ex);
    }
    
}//GEN-LAST:event_jMenuItem3ActionPerformed
    
private void SeekjSliderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SeekjSliderMouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_SeekjSliderMouseClicked
    
private void PauseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseMenuItemActionPerformed
// TODO add your handling code here:

    playSound.pauseSong();
    playStatus = "resume";
}//GEN-LAST:event_PauseMenuItemActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
     SettingsGUI settingsGUI = new SettingsGUI();
    // settingsGUI.show();
     settingsGUI.setVisible(true);
     // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void PlaylistScrollPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PlaylistScrollPaneMouseClicked
       
    }//GEN-LAST:event_PlaylistScrollPaneMouseClicked

    private void jPreviousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreviousButtonActionPerformed
        playSound.stopSong();
    if (PlayListjTable.getSelectedRow() == 0) {
        currentRowIndex = PlayListjTable.getRowCount() - 1;
    } else {
        currentRowIndex = PlayListjTable.getSelectedRow() - 1;
    }
    ListSelectionModel listSelectionModel = PlayListjTable.getSelectionModel();
    PlayListjTable.clearSelection();
    listSelectionModel.setLeadSelectionIndex(currentRowIndex);
    PlayListjTable.setSelectionForeground(Color.lightGray);
    PlayListjTable.setSelectionBackground(Color.black);
    
    File currentPlaying = (File) PlayListjTable.getValueAt(currentRowIndex, 0);
    DurationThread durationThread = new DurationThread(currentPlaying);
    trackInfoBean = durationThread.getTrackInfos(currentPlaying);
    MusicAlbumLabel.setText(trackInfoBean.getAlbumInfo());
    MusicTitleLabel.setText(trackInfoBean.getTitleInfo());
    MusicNameLabel.setText(trackInfoBean.getArtistInfo());
    TotalTimejLabel.setText(trackInfoBean.getTrackLength());
    playerThread = new MyPlayerThread(playSound, currentPlaying);
    playerThread.playSong(currentPlaying, FingerPrintCheckBox.isSelected());
    }//GEN-LAST:event_jPreviousButtonActionPerformed

    private void NextJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextJButtonActionPerformed
    
        
    playSound.stopSong();
    if (PlayListjTable.getSelectedRow() == PlayListjTable.getRowCount() - 1) {
        currentRowIndex = 0;
    } else {
        currentRowIndex = PlayListjTable.getSelectedRow() + 1;
    }
    ListSelectionModel listSelectionModel = PlayListjTable.getSelectionModel();
    PlayListjTable.clearSelection();
    listSelectionModel.setLeadSelectionIndex(currentRowIndex);
    PlayListjTable.setSelectionForeground(Color.lightGray);
    PlayListjTable.setSelectionBackground(Color.black);
    File currentPlaying = (File) PlayListjTable.getValueAt(currentRowIndex, 0);
    DurationThread durationThread = new DurationThread(currentPlaying);
    trackInfoBean = durationThread.getTrackInfos(currentPlaying);
    MusicAlbumLabel.setText(trackInfoBean.getAlbumInfo());
    MusicTitleLabel.setText(trackInfoBean.getTitleInfo());
    MusicNameLabel.setText(trackInfoBean.getArtistInfo());
    TotalTimejLabel.setText(trackInfoBean.getTrackLength());
    playerThread = new MyPlayerThread(playSound, currentPlaying);
    playerThread.playSong(currentPlaying, FingerPrintCheckBox.isSelected());
    }//GEN-LAST:event_NextJButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EchoPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EchoPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EchoPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EchoPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new EchoPlayer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AlbumLabel;
    private javax.swing.JCheckBox FingerPrintCheckBox;
    private javax.swing.JLabel MusicAlbumLabel;
    private javax.swing.JLabel MusicNameLabel;
    private javax.swing.JLabel MusicTitleLabel;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JButton NextJButton;
    private javax.swing.JMenuItem OpenAddListMenuItem;
    private javax.swing.JMenu OpenAddToList;
    private javax.swing.JMenuItem OpenMenuItem;
    private javax.swing.JMenu OptionMenu;
    private javax.swing.JMenuItem PauseMenuItem;
    private javax.swing.JTable PlayListjTable;
    private javax.swing.JMenuItem PlayMenuItem;
    private javax.swing.JMenuBar PlayerMenu;
    private javax.swing.JPanel PlayingPanel;
    private javax.swing.JButton PlayjButton;
    private javax.swing.JScrollPane PlaylistScrollPane;
    private javax.swing.JLabel RunningTimejLabel;
    private javax.swing.JSlider SeekjSlider;
    private javax.swing.JButton StopjButton;
    private javax.swing.JMenuItem SuggestionMenuItem;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JLabel TotalTimejLabel;
    private javax.swing.JLabel VolumeDynamicLabel;
    private javax.swing.JSlider VolumeJSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jPreviousButton;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    private void addToTable(File[] file, ArrayList<String> durations, String cmd) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) PlayListjTable.getModel();
        //defaultTableModel.getDataVector().removeAllElements();
        if (cmd.equalsIgnoreCase("Open")) {
            defaultTableModel.getDataVector().removeAllElements();
            Object[] cols = new Object[2];
            if (file != null && durations != null) {
                for (int i = 0; i < file.length; i++) {
                    cols[0] = file[i];
                    cols[1] = durations.get(i);
                    defaultTableModel.addRow(cols);
                }
            }
        } else if (cmd.equalsIgnoreCase("AddToList")) {
            Object[] cols = new Object[2];
            if (file != null && durations != null) {
                for (int i = 0; i < file.length; i++) {
                    cols[0] = file[i];
                    cols[1] = durations.get(i);
                    defaultTableModel.addRow(cols);
                }
            }
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                PlayListjTable.updateUI();
            }
        });
        
    }
    
    private void playSong(File playFile) {
        DurationThread durationThread = new DurationThread(playFile);
        trackInfoBean = durationThread.getTrackInfos(playFile);
        playerThread = new MyPlayerThread(playSound, playFile);
        // PlayjButton.setActionCommand("Pause");
        playStatus = "pause";
        currentFilesize = playFile.length();
        MusicAlbumLabel.setText(trackInfoBean.getAlbumInfo());
        MusicTitleLabel.setText(trackInfoBean.getTitleInfo());
        MusicNameLabel.setText(trackInfoBean.getArtistInfo());
        TotalTimejLabel.setText(trackInfoBean.getTrackLength());
        playerThread.playSong(playFile, FingerPrintCheckBox.isSelected());
        timeInSeconds = playSound.getTimeInSeconds(playFile);
        SeekjSlider.setMaximum(timeInSeconds);
        JsliderThread jsliderThread = new JsliderThread(playSound, trackInfoBean, SeekjSlider);
        new Thread(jsliderThread).start();
    }
    
    public void nextSong() {
        int selectedRow = PlayListjTable.getSelectedRow();
        int nextIndex = selectedRow + 1;
        File currentPlaying = (File) PlayListjTable.getValueAt(nextIndex, 0);
        DurationThread durationThread = new DurationThread(currentPlaying);
        trackInfoBean = durationThread.getTrackInfos(currentPlaying);
        MusicAlbumLabel.setText(trackInfoBean.getAlbumInfo());
        MusicTitleLabel.setText(trackInfoBean.getTitleInfo());
        MusicNameLabel.setText(trackInfoBean.getArtistInfo());
        TotalTimejLabel.setText(trackInfoBean.getTrackLength());
        playerThread = new MyPlayerThread(playSound, currentPlaying);
        playerThread.playSong(currentPlaying, FingerPrintCheckBox.isSelected());
        JsliderThread jsliderThread = new JsliderThread(playSound, trackInfoBean, SeekjSlider);
        new Thread(jsliderThread).start();
        
        
        
    }
}
